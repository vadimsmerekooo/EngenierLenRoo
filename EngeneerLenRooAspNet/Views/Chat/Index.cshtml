@model ChatViewModel
@{
    ViewData["Title"] = "Чат Центра";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Чат</li>
    </ol>
</nav>
<nav class="navbar navbar-search navbar-light bg-secondary justify-content-between">
    <a class="btn btn-success" asp-area="" asp-controller="Chat" asp-action="CreateGroup"><i class="bi bi-plus-square"></i> Создать групповой чат</a>
</nav>

@*
<div id="inputForm">
    <input type="text" id="message" />
    <input type="button" id="sendBtn" value="Отправить" />
</div>
 *@

<div class="container py-5 px-4">
    <div class="row rounded-lg overflow-hidden shadow">
        <!-- Users box-->
        <div class="col-4 px-0">
            <div class="bg-white">

                <div class="bg-gray px-4 py-2 bg-light">
                    <p class="h5 mb-0 py-1">Чаты</p>
                </div>

                <div id="messagesbox" class="messages-box" style="overflow-x: hidden;">
                    <partial name="_messagesBoxPartial" model="Model" />
                </div>
            </div>
        </div>
        <!-- Chat Box-->
        <div id="chatroombox" class="col-8 px-0">
            @if (Model.ChatActive != null && Model.ChatActive.Messages.Count != null)
            {
                <partial name="_chatBoxPartial" model="Model" />
            }
            else
            {
                <div class="col d-flex justify-content-center align-items-center h-100">
                    <div>
                        Выберите чат для начала диалога.
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script>


    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat-center")
        .withAutomaticReconnect()
        .configureLogging(signalR.LogLevel.Information)
        .build();

    hubConnection.on("Read", function (messageId, idChat) {
        const checkMessage = `bi-check-all`;
        const uncheckMessage = `bi-check`;
        let message = document.getElementById("messageId" + messageId);
        let messageBox = document.getElementById("messageBoxId" + messageId);
        if (message !== null) {
            message.classList.remove(uncheckMessage);
            message.classList.add(checkMessage);
        }
        if (messageBox !== null) {
            messageBox.classList.remove(uncheckMessage);
            messageBox.classList.add(checkMessage);
        }
        var elem = document.getElementById("chatNewMessageId" + idChat);
        if (elem !== null) {
            elem.parentNode.removeChild(elem);
        }
    });
    hubConnection.on("Print", function (idChat, user) {
        var elemTag = document.getElementById('messagePrint' + idChat);
        var userId = document.getElementById('userId').innerHTML;
        if (elemTag != null && userId != null) {
            const message = elemTag.innerHTML;
            const print = "Печатает...";
            if (elemTag.innerHTML != print && userId != user) {
                elemTag.innerHTML = print;
                setTimeout(
                    () => {
                        elemTag.innerHTML = message;
                    },
                    4 * 1000
                );
            }
        }
    });


    hubConnection.on("Send", function (roomName, UserSend, userName, messageId, message, date) {
        const messageOut = `<div class="media w-50 ml-auto mb-3">
                                                                                    <div class="media-body">
                                                                                        <div class="bg-primary rounded py-2 px-3 mb-2">
                                                                                                <p class="text-small mb-0 text-white">${message}</p>
                                                                                        <i id="messageBoxId${messageId}" class="bi bi-check"></i>
                                                                                        </div>
                                                                                        <p class="small text-muted">${date}</p>
                                                                                    </div>
                                                                                </div>`;

        const messageIn = `<div class="media w-50 mb-3">
                                                                                    <img src="../img/resource/user-icon.png" alt="user" width="50" class="rounded-circle">
                                                                                    <div class="media-body ml-3">
                                                                                            <div class="rounded py-2 px-3 mb-2 shadow">
                                                                                                <p class="text-small mb-0 text-muted">${message}</p>
                                                                                        <i id="messageBoxId${messageId}" class="bi bi-check"></i>
                                                                                        </div>
                                                                                        <p class="small text-muted">${date}</p>
                                                                                    </div>
                                                                                </div>`;


        var elem = document.getElementById("chatempty");
        if (elem !== null) {
            elem.parentNode.removeChild(elem);
        }

        let chatRoom = document.getElementsByClassName('chatroomboxActive')[0];
        if (chatRoom != undefined || chatRoom != null) {
            const chatActiveId = chatRoom.id.replace('chatroom', '')
            if (chatActiveId != null && chatActiveId == roomName) {
                messagesBoxPartialUpdateDirect(roomName);
            }
            else {
                messagesBoxPartialUpdateDirect(chatActiveId);
            }
        }
        else {
            messagesBoxPartialUpdate();
        }

        if (`@Model.User.Id` === UserSend) {
            document.getElementById("chatroom" + roomName).insertAdjacentHTML('beforeend', messageOut);
            scrollToLowerChat();
        }
        else {
            document.getElementById("chatroom" + roomName).insertAdjacentHTML('beforeend', messageIn);
        }
    });

    function Send(room, user, userFio) {
        const message = document.getElementById("messageinput").value;
        if (message.trim() === "")
            return;
        hubConnection.invoke("Send", user, userFio, message.trim(), room);
        document.getElementById("messageinput").value = '';
        document.getElementById("messageinput").focus();
    }
    function Read(user, room) {
        hubConnection.invoke("Read", user, room);
    }
    function Print(room, user) {
        hubConnection.invoke("Print", room, user);
    }
    hubConnection.start();
</script>